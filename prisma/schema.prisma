generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// user session 
model UserSession {
  id         Int       @id @default(autoincrement())
  sessionId  String    @unique @default(uuid())
  userId     Int
  ip         String?
  sessionEnd DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

// profile 
model Profile {
  id                   Int       @id @default(autoincrement())
  name                 String
  avatar               String?
  avatarFallback       String
  email                String
  user                 User      @relation(fields: [userId], references: [id])
  userId               Int       @unique
  tasks                Task[]    @relation("AssigneeRelation")
  createdTasks         Task[]    @relation("TaskCreatorRelation")
  createdProjects      Project[] @relation("ProjectCreatorReference")
  manageProjects       Project[] @relation("ProjectManagerReference")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  memberOfTask         Task[]
  Project              Project?  @relation(fields: [projectId], references: [id])
  projectId            Int?
  collaboratedProjects Project[] @relation("Projectcollaborator")
}

// role
model Role {
  id     Int    @id @default(autoincrement())
  title  String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}

// create user 
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  roles     Role[]
  password  String
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  taskId    Int?
}

model Status {
  id        Int       @id @default(autoincrement())
  title     String
  slug      String
  textColor String
  bgColor   String
  Project   Project[]
  Task      Task[]
}

// project modal
model Project {
  id            Int                @id @default(autoincrement())
  title         String
  createdBy     Profile            @relation(name: "ProjectCreatorReference", fields: [creatorId], references: [userId])
  creatorId     Int
  dueDate       DateTime?
  tasks         Task[]
  status        Status             @relation(fields: [statusId], references: [id])
  statusId      Int                @default(1)
  manager       Profile            @relation(name: "ProjectManagerReference", fields: [managerId], references: [userId])
  managerId     Int
  collaborators Profile[]          @relation(name: "Projectcollaborator")
  dependencies  TaskDependencies[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now())
  Profile       Profile[]
}

// task modal
model Task {
  id            Int                @id @default(autoincrement())
  title         String?
  taskCreator   Profile            @relation(name: "TaskCreatorRelation", fields: [taskCreatorId], references: [userId])
  taskCreatorId Int
  assignee      Profile?           @relation(name: "AssigneeRelation", fields: [assigneeId], references: [userId])
  assigneeId    Int?
  description   String?
  dueDate       DateTime?
  project       Project?           @relation(fields: [projectId], references: [id])
  projectId     Int?
  dependencies  TaskDependencies[]
  members       Profile[]
  status        Status             @relation(fields: [statusId], references: [id])
  statusId      Int                @default(1)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now())
}

model TaskDependencies {
  id        Int      @id @default(autoincrement())
  type      String
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}
